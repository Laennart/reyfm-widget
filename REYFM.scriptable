{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "pink",
    "glyph" : "bolt"
  },
  "name" : "REYFM",
  "script" : "\nlet channel = 'original'\nlet param = args.widgetParameter\nif (param != null && param.length > 0)\n    channel = param\n\nconst apiUrl = 'https:\/\/api.reyfm.de\/v4'\nconst logoUrl = 'https:\/\/cdn.reyfm.de\/img\/logo.png'\nconst listenerIconUrl = 'https:\/\/cdn.imarustudios.de\/reyfm\/icons\/listener_icon.png'\n\nconst widget = new ListWidget()\nconst channelInfo = await fetchChannelInfo();\nawait createWidget()\n\n\/\/ used for debugging if script runs inside the app\nif (config.runsInApp)\n    await (getSize() === 0 ? widget.presentSmall() : (getSize() === 1 ? widget.presentMedium() : widget.presentLarge()))\nScript.setWidget(widget)\nScript.complete()\n\nfunction getSize() {\n    if (config.runsInApp)\n        return 2;\n    switch (config.widgetFamily) {\n        case 'small': return 0;\n        case 'medium': return 1;\n        case 'large': return 2;\n        default: return 0;\n    }\n}\n\nasync function createWidget() {\n    if (getSize() === 0)\n        widget.setPadding(10, 10, 10, 10)\n    else\n        widget.setPadding(17, 17, 17, 17)\n    widget.backgroundColor = Color.dynamic(new Color('#ffffff'), new Color('#131317'));\n\n    \/\/ Add logo\n    const logoStack = widget.addStack()\n    logoStack.layoutHorizontally()\n    const logoImageStack = logoStack.addStack()\n    const logoImg = await getLogo()\n    const img = logoImageStack.addImage(logoImg);\n    img.imageSize = new Size(getLogoSize(), getLogoSize())\n    img.leftAlignImage()\n    img.tintColor = Color.dynamic(new Color('#000000'), new Color('#ffffff'))\n    logoStack.addSpacer(getSize() === 0 ? 4 : 10)\n\n    \/\/ add channel name\n    const textStack = logoStack.addStack()\n    textStack.layoutVertically()\n    textStack.addSpacer(getChannelNameSpacer())\n    const text = textStack.addText('#' + channel.toUpperCase())\n    text.leftAlignText()\n    text.font = Font.boldSystemFont(getChannelNameFontSize())\n\n    widget.addSpacer()\n    if (typeof channelInfo == \"undefined\") {\n        \/\/ channel does not exist\n        text.textColor = Color.dynamic(new Color('#2e3135'), new Color('#ffffff'))\n        \/\/TODO\n    } else {\n        widget.url = 'https:\/\/reyfm.de\/' + channel\n\n        \/\/ add listener icon and amount\n        if (getSize() !== 0) {\n            logoStack.addSpacer()\n            const listenerStack = logoStack.addStack()\n            listenerStack.layoutVertically()\n            listenerStack.addSpacer(getChannelNameSpacer())\n            const contentStack = listenerStack.addStack()\n\n            const iconStack = contentStack.addStack()\n            iconStack.layoutVertically()\n            iconStack.addSpacer(3)\n\n            const listenerImg = await getListenerIcon()\n            const listenerIcon = iconStack.addImage(listenerImg)\n            listenerIcon.imageSize = new Size(17, 17)\n            listenerIcon.tintColor = Color.dynamic(new Color('#242728'), new Color('#b3b5ad'))\n\n            const listener = contentStack.addText(' ' + channelInfo.listeners.toString())\n            listener.leftAlignText()\n            listener.font = Font.boldSystemFont(getChannelNameFontSize())\n            listener.textColor = Color.dynamic(new Color('#242728'), new Color('#b3b5ad'))\n        }\n\n        text.textColor = new Color(channelInfo.color);\n        let artist = channelInfo.now.artist\n        let title = channelInfo.now.title\n        let coverUrl = channelInfo.now.cover_urls['240x240'];\n        await addTrack(title, artist, coverUrl)\n\n        if (getSize() === 2) {\n            let count = 0;\n            for (let key in channelInfo.history) {\n                if (count === 2)\n                    continue\n                widget.addSpacer(15)\n                if (channelInfo.history.hasOwnProperty(key)) {\n                    let trackObj = channelInfo.history[key]\n                    let time = trackObj.played_at\n                    let artist = trackObj.artist\n                    let title = trackObj.title\n                    let coverUrl = trackObj.cover_urls['240x240']\n                    await addTrack(title, artist, coverUrl, time)\n                    count++;\n                }\n            }\n        }\n    }\n    widget.addSpacer()\n}\n\nasync function addTrack(title, artist, coverUrl, time) {\n    \/\/ trim artist name\n    if (artist.length > getArtistLength()) {\n        artist = artist.substr(0, getArtistLength())\n        while (artist.endsWith(\" \"))\n            artist = artist.substr(0, artist.length - 1)\n        artist += '...'\n    }\n\n    \/\/ trim title\n    if (title.length > getTitleLength()) {\n        title = title.substr(0, getTitleLength())\n        while (title.endsWith(\" \"))\n            title = title.substr(0, title.length - 1)\n        title += '...'\n    }\n\n    const trackStack = widget.addStack()\n    if (getSize() === 0)\n        trackStack.layoutVertically()\n    else {\n        trackStack.layoutHorizontally()\n        if (getSize() === 1)\n            trackStack.backgroundColor = Color.dynamic(new Color(channelInfo.color),  new Color('#242728'))\n        else {\n            if (time === undefined) {\n                trackStack.backgroundColor = new Color(channelInfo.color)\n            } else {\n                trackStack.backgroundColor = Color.dynamic(new Color('#b3b5ad'), new Color('#242728'))\n            }\n        }\n        trackStack.cornerRadius = 9\n    }\n\n    const coverStack = trackStack.addStack()\n    const coverImg = await new Request(coverUrl).loadImage()\n    const cover = coverStack.addImage(coverImg)\n    cover.imageSize = new Size(getCoverSize(), getCoverSize())\n    cover.leftAlignImage()\n    cover.cornerRadius = 8\n    trackStack.addSpacer(getSize() === 0 ? 5 : 10)\n    const trackTextStack = trackStack.addStack();\n    trackTextStack.layoutVertically()\n    trackTextStack.addSpacer(getSize() === 0 ? 2 : 10)\n\n    if (getSize() === 2) {\n        const timeText = trackTextStack.addText(typeof time === \"undefined\" ? \"LIVE\" : time);\n        timeText.textColor = typeof time === \"undefined\" ? new Color('#ffffff') : Color.dynamic(new Color('#ffffff'), new Color('#b3b5ad'));\n        timeText.font = Font.lightSystemFont(getTitleFontSize() - 3)\n    }\n\n    const artistText = trackTextStack.addText(artist);\n    const titleText = trackTextStack.addText(title);\n\n    if (getSize() === 0)\n        titleText.textColor = Color.dynamic(new Color('#242728'), new Color('#b3b5ad'))\n    else\n        titleText.textColor =  typeof time === \"undefined\" ? new Color('#ffffff') : Color.dynamic(new Color('#ffffff'), new Color('#b3b5ad'))\n    titleText.font = Font.lightSystemFont(getTitleFontSize())\n\n    if (getSize() === 0)\n        artistText.textColor = Color.dynamic(new Color('#242728'), new Color('#b3b5ad'))\n    else\n        artistText.textColor = typeof time === \"undefined\" ? new Color('#ffffff') : Color.dynamic(new Color('#ffffff'), new Color('#b3b5ad'))\n    artistText.font = Font.boldSystemFont(getSize() === 0 ? 14 : 16)\n\n    trackStack.addSpacer()\n}\n\nasync function fetchChannelInfo() {\n    let req = new Request(apiUrl)\n    let apiResult = await req.loadJSON()\n    if (req.response.statusCode === 200) {\n        for (let key in apiResult.channels) {\n            if (apiResult.channels.hasOwnProperty(key)) {\n                let channelObj = apiResult.channels[key];\n                if (channelObj.name === channel || channelObj.id === channel)\n                    return channelObj;\n            }\n        }\n    }\n}\n\nasync function getListenerIcon() {\n    return await getImage('listener-icon.png', listenerIconUrl)\n}\n\nasync function getLogo() {\n    return await getImage('logo.png', logoUrl)\n}\n\nasync function getImage(name, url) {\n    let fm = FileManager.local()\n    let dir = fm.documentsDirectory()\n    let path = fm.joinPath(dir, name)\n    if (fm.fileExists(path)) {\n        return fm.readImage(path)\n    } else {\n        let image = await new Request(url).loadImage()\n        fm.writeImage(path, image)\n        return image\n    }\n}\n\nfunction getChannelNameSpacer() {\n    switch (getSize()) {\n        case 0: return 7;\n        case 1: return 8;\n        case 2: return 8;\n    }\n}\n\nfunction getLogoSize() {\n    switch (getSize()) {\n        case 0: return 34;\n        case 1: return 40;\n        case 2: return 41;\n    }\n}\n\nfunction getTitleFontSize() {\n    switch (getSize()) {\n        case 0: return 13;\n        case 1: return 15;\n        case 2: return 15;\n    }\n}\n\nfunction getChannelNameFontSize() {\n    switch (getSize()) {\n        case 0: return 16;\n        case 1: return 20;\n        case 2: return 20;\n    }\n}\n\nfunction getCoverSize() {\n    switch (getSize()) {\n        case 0: return 50;\n        case 1: return 60;\n        case 2: return 70;\n    }\n}\n\nfunction getTitleLength() {\n    switch (getSize()) {\n        case 0: return 22;\n        case 1: return 27;\n        case 2: return 22;\n    }\n}\n\nfunction getArtistLength() {\n    switch (getSize()) {\n        case 0: return 15;\n        case 1: return 24;\n        case 2: return 20;\n    }\n}\n",
  "share_sheet_inputs" : [

  ]
}